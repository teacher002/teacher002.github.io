<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Zhuqirui的杂货铺</title>
    <link>https://teacher002.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Zhuqirui的杂货铺</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 13 Mar 2024 23:02:20 +0800</lastBuildDate>
    <atom:link href="https://teacher002.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>常用排序</title>
      <link>https://teacher002.github.io/posts/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Wed, 13 Mar 2024 23:02:20 +0800</pubDate>
      <guid>https://teacher002.github.io/posts/%E5%B8%B8%E7%94%A8%E6%8E%92%E5%BA%8F/</guid>
      <description>1冒泡排序(Bubble Sort) 时间复杂度: $O(n^2)$&#xA;void mp()//自定义mp()函数 { for(int i=1;i&amp;lt;=n-1;i++) { for(int j=1;j&amp;lt;=n-i;j++) { if(a[j]&amp;gt;a[j+1])//相邻元素比较，若逆序则交换（升序为左大于右，降序反之) { swap(a[j],a[j+1]); } } } } 2选择排序(Selection sort) 讲解:它的工作原理是：第一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，然后再从剩余的未排序元素中寻找到最小（大）元素，然后放到已排序的序列的末尾。以此类推，直到全部待排序的数据元素的个数为零。选择排序是不稳定的排序方法。&#xA;最好复杂度:$O(n^2)$&#xA;最坏复杂度:$O(n^2)$&#xA;void sz() { for(int i=1;i&amp;lt;=n-1;i++) { int minn=i; for(int j=1;j&amp;lt;=n-i;j++) { if(a[j]&amp;lt;a[minn]) { minn=j; } } swap(a[j],a[minn]); } } 3插入排序(Insertion Sort) 讲解:它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。&#xA;时间复杂度:$O(N^ ( 1-2) )$&#xA;void cr() { for(int i=2;i&amp;lt;=n;i++) { int k=1; int tmp =a[i]; while(a[k]&amp;lt;a[i]) { k++; } for(int j=i-1;j&amp;gt;=k;j--) { a[j+1]=a[j]; } a[k]=tmp;//插入 } } 4Sort排序 时间复杂度:$O(nlogn)$</description>
    </item>
    <item>
      <title>Dev-C&#43;&#43;安装教程</title>
      <link>https://teacher002.github.io/posts/devc&#43;&#43;%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</link>
      <pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://teacher002.github.io/posts/devc&#43;&#43;%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</guid>
      <description>编译器Dev-C++的安装及使用 1.Dev-C++的安装 下载链接: https://acm.nyist.edu.cn/file/2/Dev-Cpp_5.11_TDM-GCC_4.9.2_Setup.exe ​下载​: 点击此处 下载&#xA;安装&#xA;点击安装包 选择英文 点击ok&#xA;选择我同意&#xA;无脑选下一步&#xA;路径改不改都可 占不了多少空间&#xA;等待安装完毕 点击完成&#xA;选择语言为中文&#xA;选择喜欢的主题&#xA;点击ok 安装完成&#xA;2.Dev-C++的使用 Dev-C++的界面和常用按钮&#xA;主界面 常用按钮 功能 图标 快捷键 新建 Ctrl+N 编译 F9 运行 F10 编译运行 F11 调试 F5 使用Dev-C++的第一个程序&#xA;点击 文件-&amp;gt;新建-&amp;gt;源代码 并在界面中输入以下代码&#xA;#include&amp;lt;stdio.h&amp;gt; int main(){ printf(&amp;#34;Hello World!&amp;#34;); } Copy 输入完成后 点击编译按钮 进行编译 等待编译完成&#xA;若编译出错 如下图 请检查代码&#xA;编译成功后即可点击运行按钮 进行运行&#xA;使用Dev-C++进行程序调试&#xA;什么是调试&#xA;在我们日常的编写程序中难免会遇到一些小的bug，我们通过阅读代码的方式可能并不好揪出它们，这时我们就需要对着程序一步一步走，这就是调试&#xA;初次使用的设置&#xA;选择 工具-&amp;gt;编译选项&#xA;选择 代码生成/优化-&amp;gt;连接器 并更改产生调试信息为&amp;quot;YES&amp;quot; 并确定;&#xA;重新启动编译器 或者重新编译</description>
    </item>
  </channel>
</rss>
